---
description:
globs:
alwaysApply: false
---
# 开发规范

## 编码风格

1. 遵循 Go 标准编码规范
2. 使用驼峰命名法：
   - 公共函数和变量使用大驼峰（PascalCase）
   - 私有函数和变量使用小驼峰（camelCase）
3. 使用有意义的变量名和函数名，避免使用缩写
4. 注释应当清晰描述函数功能、参数和返回值

## 项目管理

1. 使用 git 进行版本控制
2. 每次提交应当包含简洁明了的 commit 信息
3. 所有新功能都必须添加单元测试
4. 使用 Markdown 格式记录任务进度：
   ```markdown
   - [x] 已完成任务
   - [ ] 待完成任务
   ```

## 数据库使用规范

1. 数据库操作优先使用 PostgreSQL，其次是 MySQL
2. 所有数据库模型必须嵌入 `db.Model` 基础结构
3. 避免在模型层编写复杂的业务逻辑
4. 必要时使用事务来保证数据一致性

## API 设计规范

1. RESTful API 设计规范：
   - GET: 获取资源
   - POST: 创建资源
   - PUT: 更新资源
   - DELETE: 删除资源
2. 使用 JSON 作为数据交换格式
3. API 请求和响应使用 req 和 rsp 包中的结构定义
4. API 路径使用小写字母，多个单词以短横线（-）分隔

## 错误处理

1. 使用 `code` 包中定义的错误码
2. 函数应当返回明确的错误信息
3. 避免使用 panic，除非是不可恢复的错误
4. 在日志中记录详细的错误信息，并包含相关上下文

## 测试规范

1. 为公共函数编写单元测试
2. 使用 Go 标准测试框架
3. 测试文件应命名为 `*_test.go`
4. 测试函数应命名为 `Test<FunctionName>`

## 变更记录

每次代码变更后，记录变更内容到 `CHANGELOG.md`：

```markdown
## {日期时间} {简要描述}
- 变更内容1
- 变更内容2
- 变更内容...
```
