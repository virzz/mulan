---
description:
globs:
alwaysApply: false
---
# 容器和部署规范

## 容器化

1. 优先使用 Podman 进行容器管理
2. 容器镜像应当基于官方 Go 镜像或 Alpine Linux
3. 使用多阶段构建减小镜像体积：
   - 第一阶段：编译 Go 应用
   - 第二阶段：仅复制构建产物到最终镜像

## Kubernetes 部署

1. 使用声明式配置管理 Kubernetes 资源
2. 按照环境划分命名空间：
   - `mulan-dev` - 开发环境
   - `mulan-test` - 测试环境
   - `mulan-prod` - 生产环境
3. 使用 ConfigMap 和 Secret 管理配置

## 数据库

1. 生产环境使用 PostgreSQL 集群确保高可用
2. 使用 Redis 进行缓存和会话存储
3. 定期备份数据库并验证恢复过程

## 监控和日志

1. 使用 Prometheus 收集指标
2. 使用 Grafana 进行可视化监控
3. 使用 ELK 或类似技术栈进行日志收集和分析
4. 对关键指标设置告警

## CI/CD 流程

1. 使用 CI 工具自动化测试和构建
2. 实现持续集成和持续部署
3. 流程步骤：
   - 代码提交触发 CI 工作流
   - 运行单元测试和代码质量检查
   - 构建容器镜像
   - 推送镜像到镜像仓库
   - 部署到对应环境

## 伸缩和高可用

1. 应用水平扩展：使用多副本部署
2. 数据库垂直和水平扩展：根据需求调整资源和实例数
3. 避免单点故障：核心组件都应当有冗余设计
